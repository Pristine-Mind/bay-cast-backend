# Generated by Django 4.2.14 on 2025-01-04 01:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("product", "0005_alter_process_entry_time_alter_process_exit_time"),
    ]

    operations = [
        migrations.CreateModel(
            name="MoldingFloor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cope_baume",
                    models.FloatField(
                        blank=True,
                        help_text="Baume value for cope.",
                        null=True,
                        verbose_name="Cope Baume",
                    ),
                ),
                (
                    "drag_baume",
                    models.FloatField(
                        blank=True,
                        help_text="Baume value for drag.",
                        null=True,
                        verbose_name="Drag Baume",
                    ),
                ),
                (
                    "core_baume",
                    models.FloatField(
                        blank=True,
                        help_text="Baume value for core.",
                        null=True,
                        verbose_name="Core Baume",
                    ),
                ),
                (
                    "cope_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for cope.",
                        null=True,
                        verbose_name="Cope Temperature (°F)",
                    ),
                ),
                (
                    "drag_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for drag.",
                        null=True,
                        verbose_name="Drag Temperature (°F)",
                    ),
                ),
                (
                    "core_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for core.",
                        null=True,
                        verbose_name="Core Temperature (°F)",
                    ),
                ),
                (
                    "cope_no_of_coatings",
                    models.FloatField(
                        blank=True,
                        help_text="Number of coatings for cope.",
                        null=True,
                        verbose_name="Cope Number of Coatings",
                    ),
                ),
                (
                    "drag_no_of_coatings",
                    models.FloatField(
                        blank=True,
                        help_text="Number of coatings for drag.",
                        null=True,
                        verbose_name="Drag Number of Coatings",
                    ),
                ),
                (
                    "core_no_of_coatings",
                    models.FloatField(
                        blank=True,
                        help_text="Number of coatings for core.",
                        null=True,
                        verbose_name="Core Number of Coatings",
                    ),
                ),
                (
                    "cope_heat_applied",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if heat was applied for cope.",
                        verbose_name="Cope Heat Applied",
                    ),
                ),
                (
                    "drag_heat_applied",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if heat was applied for drag.",
                        verbose_name="Drag Heat Applied",
                    ),
                ),
                (
                    "core_heat_applied",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if heat was applied for core.",
                        verbose_name="Core Heat Applied",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RammingFloor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cope_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for cope.",
                        null=True,
                        verbose_name="Cope Temperature (°F)",
                    ),
                ),
                (
                    "drag_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for drag.",
                        null=True,
                        verbose_name="Drag Temperature (°F)",
                    ),
                ),
                (
                    "core_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature for core.",
                        null=True,
                        verbose_name="Core Temperature (°F)",
                    ),
                ),
                (
                    "cope_humidity",
                    models.FloatField(
                        blank=True,
                        help_text="Humidity for cope.",
                        null=True,
                        verbose_name="Cope Humidity (%)",
                    ),
                ),
                (
                    "drag_humidity",
                    models.FloatField(
                        blank=True,
                        help_text="Humidity for drag.",
                        null=True,
                        verbose_name="Drag Humidity (%)",
                    ),
                ),
                (
                    "core_humidity",
                    models.FloatField(
                        blank=True,
                        help_text="Humidity for core.",
                        null=True,
                        verbose_name="Core Humidity (%)",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="process",
            name="baume",
        ),
        migrations.RemoveField(
            model_name="process",
            name="humidity",
        ),
        migrations.RemoveField(
            model_name="process",
            name="pictures",
        ),
        migrations.RemoveField(
            model_name="process",
            name="pouring_temperature",
        ),
        migrations.RemoveField(
            model_name="process",
            name="stage",
        ),
        migrations.RemoveField(
            model_name="process",
            name="temperature",
        ),
        migrations.RemoveField(
            model_name="process",
            name="weights",
        ),
        migrations.CreateModel(
            name="CastingSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "casting_type",
                    models.CharField(
                        help_text="Type of casting used in the process.",
                        max_length=100,
                        verbose_name="Casting Type",
                    ),
                ),
                (
                    "weight_lbs",
                    models.FloatField(
                        help_text="The weight of the casting in pounds.",
                        verbose_name="Weight (lbs)",
                    ),
                ),
                (
                    "materials",
                    models.CharField(
                        help_text="Materials used in the casting process.",
                        max_length=200,
                        verbose_name="Materials",
                    ),
                ),
                (
                    "pattern_type",
                    models.CharField(
                        help_text="Type of pattern used in the process.",
                        max_length=100,
                        verbose_name="Pattern Type",
                    ),
                ),
                (
                    "sand_ph_load",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="PH level of the sand used.",
                        max_digits=5,
                        null=True,
                        verbose_name="Sand PH (Load)",
                    ),
                ),
                (
                    "sand_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature of the sand used.",
                        null=True,
                        verbose_name="Sand Temperature (°F)",
                    ),
                ),
                (
                    "mold_close_to_pour_time_days",
                    models.FloatField(
                        blank=True,
                        help_text="Time (in days) between mold closure and pouring.",
                        null=True,
                        verbose_name="Mold Close-to-Pour Time (Days)",
                    ),
                ),
                (
                    "pour_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature of the pour during the process.",
                        null=True,
                        verbose_name="Pour Temperature (°F)",
                    ),
                ),
                (
                    "pour_time_seconds",
                    models.FloatField(
                        blank=True,
                        help_text="Time taken for the pouring process in seconds.",
                        null=True,
                        verbose_name="Pour Time (Seconds)",
                    ),
                ),
                (
                    "shakeout_time_days",
                    models.FloatField(
                        blank=True,
                        help_text="Time taken for shakeout, recorded in days.",
                        null=True,
                        verbose_name="Shakeout Time (Days)",
                    ),
                ),
                (
                    "surface_quality_grade",
                    models.IntegerField(
                        blank=True,
                        help_text="Quality grade for the surface (1-10, where 10 is the best).",
                        null=True,
                        verbose_name="Surface Quality Grade",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        help_text="Additional remarks or observations about the process.",
                        null=True,
                        verbose_name="Comments",
                    ),
                ),
                (
                    "molding_floor",
                    models.OneToOneField(
                        help_text="Molding floor details for cope, drag, and core.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product.moldingfloor",
                        verbose_name="Molding Floor",
                    ),
                ),
                (
                    "pictures",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Images associated with this casting snapshot.",
                        to="product.processingimages",
                        verbose_name="Pictures",
                    ),
                ),
                (
                    "process",
                    models.ForeignKey(
                        help_text="The process this snapshot is associated with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product.process",
                        verbose_name="Related Process",
                    ),
                ),
                (
                    "ramming_floor",
                    models.OneToOneField(
                        help_text="Ramming floor details for cope, drag, and core.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product.rammingfloor",
                        verbose_name="Ramming Floor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Casting Snapshot",
                "verbose_name_plural": "Casting Snapshots",
            },
        ),
    ]
